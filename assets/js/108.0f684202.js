(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{428:function(e,t,a){"use strict";a.r(t);var i=a(7),o=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"hybridclr-packaging-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hybridclr-packaging-workflow"}},[e._v("#")]),e._v(" HybridCLR packaging workflow")]),e._v(" "),t("p",[e._v("Due to the requirements of the hot update itself and some limitations of Unity resource management, some special processing is required for the packaging workflow, which is mainly divided into several parts:")]),e._v(" "),t("ul",[t("li",[e._v("Set the UNITY_IL2CPP_PATH environment variable")]),e._v(" "),t("li",[e._v("Automatically exclude hot update assembly when packaging")]),e._v(" "),t("li",[e._v("Add the hot update dll name to the assembly list when packaging")]),e._v(" "),t("li",[e._v("Copy the trimmed aot dll generated during the packaging process for supplementary metadata")]),e._v(" "),t("li",[e._v("Use Unity's "),t("code",[e._v("PlayerBuildInterface.CompilePlayerScripts")]),e._v(" Api to compile hot update dll")]),e._v(" "),t("li",[e._v("Generate some files and codes needed for packaging")]),e._v(" "),t("li",[e._v("Special handling for iOS platform")])]),e._v(" "),t("p",[e._v("We provide "),t("code",[e._v("com.focus-creative-games.hybridclr_unity")]),e._v(" package "),t("a",{attrs:{href:"https://gitee.com/focus-creative-games/hybridclr_unity",target:"_blank",rel:"noopener noreferrer"}},[e._v("gitee (recommended)"),t("OutboundLink")],1),e._v(" or "),t("a",{attrs:{href:"https://github.com/focus-creative-games/hybridclr_unity",target:"_blank",rel:"noopener noreferrer"}},[e._v("github"),t("OutboundLink")],1),e._v(" , which contains standard tool scripts related to packaging workflows.")]),e._v(" "),t("p",[e._v("For more detailed implementation, please see the source code or "),t("RouterLink",{attrs:{to:"/en/hybridclr/hybridclr_unity/"}},[e._v("hybridclr_unity introduction")])],1),e._v(" "),t("h2",{attrs:{id:"packaging-process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#packaging-process"}},[e._v("#")]),e._v(" Packaging process")]),e._v(" "),t("ul",[t("li",[e._v("Refer to "),t("RouterLink",{attrs:{to:"/en/hybridclr/project_settings/"}},[e._v("HybridCLR Configuration")]),e._v(" to make necessary settings")],1),e._v(" "),t("li",[e._v("Run the menu "),t("code",[e._v("HybridCLR/Generate/All")]),e._v(" to execute the necessary generation operations with one click")]),e._v(" "),t("li",[e._v("Pack according to the original packaging process of your project")]),e._v(" "),t("li",[e._v("Process the hot update dll under "),t("code",[e._v("HybridCLRData/HotUpdateDlls")]),e._v(" according to the hot update resource packaging process of your project")]),e._v(" "),t("li",[e._v("Process the AOT dll under "),t("code",[e._v("HybridCLRData/AssembliesPostIl2CppStrip")]),e._v(" according to the hot update resource packaging process of your project")])]),e._v(" "),t("h2",{attrs:{id:"set-the-unity-il2cpp-path-environment-variable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-the-unity-il2cpp-path-environment-variable"}},[e._v("#")]),e._v(" Set the UNITY_IL2CPP_PATH environment variable")]),e._v(" "),t("p",[e._v("The relevant code is in "),t("code",[e._v("Editor/BuildProcessors/CheckSettings.cs")]),e._v(".")]),e._v(" "),t("p",[e._v("The script automatically sets or clears the UNITY_IL2CPP_PATH environment variable when packaging according to whether HybridCLR is enabled.")]),e._v(" "),t("h2",{attrs:{id:"automatically-exclude-hot-update-assembly-when-packaging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#automatically-exclude-hot-update-assembly-when-packaging"}},[e._v("#")]),e._v(" Automatically exclude hot update assembly when packaging")]),e._v(" "),t("p",[e._v("The relevant code is in "),t("code",[e._v("Editor/BuildProcessors/FilterHotFixAssemblies.cs")]),e._v(".")]),e._v(" "),t("p",[e._v("Obviously, the hot update assembly should not be processed by il2cpp and compiled into the final package body. We handle the "),t("code",[e._v("IFilterBuildAssemblies")]),e._v(" callback,\nRemove the hot update dll from the list of build assemblies.")]),e._v(" "),t("h2",{attrs:{id:"add-the-hot-update-dll-name-to-the-assembly-configuration-list-when-packaging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-the-hot-update-dll-name-to-the-assembly-configuration-list-when-packaging"}},[e._v("#")]),e._v(" Add the hot update dll name to the assembly configuration list when packaging")]),e._v(" "),t("p",[e._v("The relevant code is in "),t("code",[e._v("Editor/BuildProcessors/PatchScriptingAssemblyList.cs")]),e._v(".")]),e._v(" "),t("p",[e._v("For all C# classes, they can be used normally after Assembly.Load, but for scripts like MonoBehaviour or ScriptableObject, if you want to mount them on hot update resources\nFor scripts to restore correctly, issues related to Unity's resource management mechanisms must be dealt with.")]),e._v(" "),t("p",[e._v("Simply put, the dll name of the assembly where the hot update MonoBehaviour script is located must be added to the assembly list configuration file, so that Unity's resource management system can correctly identify it\nand restore scripts. For a more detailed introduction to the principle, please see "),t("RouterLink",{attrs:{to:"/en/hybridclr/monobehaviour/"}},[e._v("Using Hot Update MonoBehaviour")]),e._v(".")],1),e._v(" "),t("p",[e._v("When the tool is packaged, it will automatically add the dll name of the hot update assembly to the assembly list configuration file.")]),e._v(" "),t("h2",{attrs:{id:"backup-trimmed-aot-dll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#backup-trimmed-aot-dll"}},[e._v("#")]),e._v(" Backup trimmed AOT dll")]),e._v(" "),t("p",[e._v("The relevant code is in "),t("code",[e._v("Editor/BuildProcessors/CopyStrippedAOTAssemblies.cs")]),e._v(".")]),e._v(" "),t("p",[e._v("In order to solve the AOT generic problem, we use a HybridCLR original patented technology "),t("code",[e._v("supplementary metadata technology")]),e._v(". This technique needs to provide a cropped AOT dll to resolve\nil2cpp IL->c++ conversion process metadata loss problem.")]),e._v(" "),t("p",[e._v("In summary, in order to use AOT generics without restrictions, you need to get the trimmed AOT dll generated when packaging. The script will generate the trimmed AOT dll during the packaging process\nAutomatically copied to the "),t("code",[e._v("HybridCLRData/AssembliesPostIl2CppStrip/{platform}")]),e._v(" directory for future processing.")]),e._v(" "),t("p",[e._v("The project can either choose to put the trimmed AOT dll file directly in the StreamingAssets directory of the main package, or choose to download it after packaging, and handle it flexibly according to your preferences.")]),e._v(" "),t("p",[e._v("For more detailed principle documents, please see "),t("RouterLink",{attrs:{to:"/en/hybridclr/aot_generic/"}},[e._v("AOT Generic Principles")])],1),e._v(" "),t("h2",{attrs:{id:"use-unity-s-playerbuildinterface-compileplayerscripts-api-to-compile-hot-update-dll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-unity-s-playerbuildinterface-compileplayerscripts-api-to-compile-hot-update-dll"}},[e._v("#")]),e._v(" Use Unity's "),t("code",[e._v("PlayerBuildInterface.CompilePlayerScripts")]),e._v(" Api to compile hot update dll")]),e._v(" "),t("p",[e._v("The relevant code is in "),t("code",[e._v("Editor/Commands/CompileDllCommand.cs")]),e._v(".")]),e._v(" "),t("p",[e._v("For each target, you must use the hot update dll compiled under the compile switch of the target platform, otherwise the hot update code will not match the code information of the AOT main package or hot update resources.")]),e._v(" "),t("p",[e._v("Unity will print this kind of log when there is no match: "),t("code",[e._v("A scripted object (probably XXX?) has a different serialization layout when loading. Did you #ifdef UNITY_EDITOR a section of your serialized properties in any of your scripts?")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"generate-the-files-and-code-needed-for-packaging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generate-the-files-and-code-needed-for-packaging"}},[e._v("#")]),e._v(" Generate the files and code needed for packaging")]),e._v(" "),t("p",[e._v("Contains the following generation functions:")]),e._v(" "),t("ul",[t("li",[e._v("Scan to generate link.xml")]),e._v(" "),t("li",[e._v("generate bridge function")]),e._v(" "),t("li",[e._v("Generate AOT generic instantiation code")]),e._v(" "),t("li",[e._v("Generate ReversePInvokeCallback related wrapper files")])]),e._v(" "),t("p",[e._v("The menu "),t("code",[e._v("HybridCLR/Generate/*")]),e._v(" contains these generation commands. For details, please refer to "),t("RouterLink",{attrs:{to:"/en/hybridclr/hybridclr_unity/"}},[e._v("hybridclr_unity introduction")])],1),e._v(" "),t("h3",{attrs:{id:"generate-link-xml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generate-link-xml"}},[e._v("#")]),e._v(" Generate link.xml")]),e._v(" "),t("p",[e._v("Some classes and functions that are not used in the main project code may be used in the hot update dll, and Unity has a "),t("a",{attrs:{href:"https://docs.unity3d.com/Manual/ManagedCodeStripping.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("code trimming mechanism"),t("OutboundLink")],1),e._v(".\nIf some method is not used to prevent the main project classes and functions used in the hot update from being trimmed, errors such as LoadTypeException or MethodNotFoundException will occur during runtime.")]),e._v(" "),t("p",[e._v("The solution is to configure the link.xml file to avoid clipping. Handwriting link.xml is cumbersome and easy to miss, so a script is provided to automatically generate link.xml.")]),e._v(" "),t("p",[e._v("Note that the automatically generated link.xml only scans the AOT type used in the current hot update dll, it is impossible to know the type used in the future hot update dll, so manually in "),t("code",[e._v("Assets/link.xml")]),e._v(" (or other non-automatic Reserved in the generated link.xml)\nTypes and functions that will be used in the future are necessary.")]),e._v(" "),t("h3",{attrs:{id:"generate-bridge-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generate-bridge-function"}},[e._v("#")]),e._v(" Generate bridge function")]),e._v(" "),t("p",[e._v("In order to solve the two-way parameter transfer between AOT and interpreter, a bridge function is needed. Please refer to "),t("RouterLink",{attrs:{to:"/en/hybridclr/method_bridge/"}},[e._v("Bridge Function Introduction")]),e._v(" for details.")],1),e._v(" "),t("p",[e._v("Bridge functions need to be generated before packaging.")]),e._v(" "),t("h3",{attrs:{id:"generate-aot-generic-instantiation-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generate-aot-generic-instantiation-code"}},[e._v("#")]),e._v(" Generate AOT generic instantiation code")]),e._v(" "),t("p",[e._v("Unity has a generic sharing mechanism. For generics, if they are instantiated in AOT in advance, they will be executed natively when calling the related functions of this type in the script.")]),e._v(" "),t("p",[e._v("Despite the supplementary metadata mechanism, for some performance-sensitive code, early generic instantiation can significantly improve performance. For more detailed principle documents, please see "),t("RouterLink",{attrs:{to:"/en/hybridclr/aot_generic/"}},[e._v("AOT Generic Principles")])],1),e._v(" "),t("h3",{attrs:{id:"generate-reversepinvokecallback-related-wrapper-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generate-reversepinvokecallback-related-wrapper-files"}},[e._v("#")]),e._v(" Generate ReversePInvokeCallback related wrapper files")]),e._v(" "),t("p",[e._v("If a scripting language such as xlua is used in the project, the "),t("code",[e._v("[MonoPInvokeCallback]")]),e._v(" annotation needs to be added to the C# function to be registered in lua. This returns a corresponding C++ for these C# functions\nFunction pointer, used to register in the scripting language.")]),e._v(" "),t("p",[e._v("HybridCLR supports registering hot-updated C# code in lua, but the C++ stub function corresponding to "),t("code",[e._v("[MonoPInvokeCallback]")]),e._v(" must be generated in advance to return a corresponding C++ function pointer for each C# function.\nThe script provides the function of automatically generating stub functions. For details, see "),t("RouterLink",{attrs:{to:"/en/hybridclr/monopinvokecallback/"}},[e._v("MonoPInvokeCallback Support")]),e._v(" and "),t("RouterLink",{attrs:{to:"/en/hybridclr/work_with_script_language/"}},[e._v("HybridCLR+lua/js/python")]),e._v(" documents")],1),e._v(" "),t("h2",{attrs:{id:"special-handling-for-ios-platform"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#special-handling-for-ios-platform"}},[e._v("#")]),e._v(" Special handling for iOS platform")]),e._v(" "),t("p",[e._v("Platforms other than iOS compile "),t("code",[e._v("libil2cpp source code")]),e._v(" and "),t("code",[e._v("c++ code converted from the original dll by il2cpp")]),e._v(" directly to compile the target program. iOS\nThe platform is quite special, it uses "),t("code",[e._v("libil2cpp source code")]),e._v(" to compile the libil2cpp.a file in advance, and "),t("code",[e._v("the c++ code converted from the original dll by il2cpp")]),e._v(" is linked,\nCompile the target program. The xcode project exported by Unity contains the pre-generated libil2cpp.a, but does not contain the libil2cpp source code.")]),e._v(" "),t("p",[e._v("Therefore, when compiling an iOS program, you need to compile libil2cpp.a separately, replace the corresponding file of the xcode project, and finally package the app.")]),e._v(" "),t("p",[e._v("For the compilation method, see "),t("RouterLink",{attrs:{to:"/en/hybridclr/build_ios_libil2cpp/"}},[e._v("Compile iOS version libil2cpp")]),e._v(". Please manually replace the corresponding files in the xcode project.")],1)])}),[],!1,null,null,null);t.default=o.exports}}]);