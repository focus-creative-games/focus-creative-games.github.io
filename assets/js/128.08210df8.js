(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{446:function(t,e,a){"use strict";a.r(e);var n=a(7),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"code-and-data-generation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#code-and-data-generation"}},[t._v("#")]),t._v(" Code and data generation")]),t._v(" "),e("h2",{attrs:{id:"supported-platforms-engines-and-languages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#supported-platforms-engines-and-languages"}},[t._v("#")]),t._v(" Supported platforms, engines and languages")]),t._v(" "),e("ul",[e("li",[t._v("Cross-platform\n"),e("ul",[e("li",[t._v("Win")]),t._v(" "),e("li",[t._v("Mac")]),t._v(" "),e("li",[t._v("Linux (including WSL)")])])]),t._v(" "),e("li",[t._v("Support mainstream game development languages\n"),e("ul",[e("li",[t._v("c++ (11+)")]),t._v(" "),e("li",[t._v("c# (. net framework 4+. dotnet core 3+)")]),t._v(" "),e("li",[t._v("java (1.6+)")]),t._v(" "),e("li",[t._v("go (1.10+)")]),t._v(" "),e("li",[t._v("lua (5.1+)")]),t._v(" "),e("li",[t._v("js and typescript (3.0+)")]),t._v(" "),e("li",[t._v("python (3.0+)")]),t._v(" "),e("li",[t._v("erlang (18+)")]),t._v(" "),e("li",[t._v("rust (1.5+)")]),t._v(" "),e("li",[t._v("Other "),e("strong",[t._v("protobuf")]),t._v(" supported languages")])])]),t._v(" "),e("li",[t._v("Support mainstream engines\n-unity\n"),e("ul",[e("li",[t._v("unreal")]),t._v(" "),e("li",[t._v("cocos2d-x")]),t._v(" "),e("li",[t._v("WeChat mini game platform")]),t._v(" "),e("li",[t._v("Other small game platforms that support js")])])]),t._v(" "),e("li",[t._v("Support mainstream hot update solutions\n"),e("ul",[e("li",[t._v("xlua")]),t._v(" "),e("li",[t._v("tolua")]),t._v(" "),e("li",[t._v("slua")]),t._v(" "),e("li",[t._v("ILRuntime")]),t._v(" "),e("li",[t._v("sluaunreal")]),t._v(" "),e("li",[t._v("puerts")]),t._v(" "),e("li",[t._v("XIL")])])]),t._v(" "),e("li",[t._v("Support mainstream open source frameworks\n"),e("ul",[e("li",[t._v("skynet")]),t._v(" "),e("li",[t._v("ET")]),t._v(" "),e("li",[t._v("GameFramework")]),t._v(" "),e("li",[t._v("xlua-framework")])])])]),t._v(" "),e("h2",{attrs:{id:"which-data-formats-can-be-exported"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#which-data-formats-can-be-exported"}},[t._v("#")]),t._v(" Which data formats can be exported")]),t._v(" "),e("ul",[e("li",[t._v("binary format. The format is compact and efficient to load, but basically unreadable. Recommended for official releases only.")]),t._v(" "),e("li",[t._v("json format. Good readability. Elegant alignment format is supported, and compact format is also supported. Recommended for server-side, and for client-side development.")]),t._v(" "),e("li",[e("strong",[t._v("protobuf")]),t._v(" format. Suitable for developers who are familiar with pb.")]),t._v(" "),e("li",[e("strong",[t._v("msgpack")]),t._v(" format.")]),t._v(" "),e("li",[t._v("lua format. Good readability. It is recommended only for the case where the client-side scripting language is lua.")]),t._v(" "),e("li",[t._v("xml format.")]),t._v(" "),e("li",[t._v("erlang format. For the erlang language only.")]),t._v(" "),e("li",[t._v("yaml format.")]),t._v(" "),e("li",[t._v("other formats. It is easy to extend support.")])]),t._v(" "),e("p",[e("strong",[t._v("In the same format, the data generated for different languages is exactly the same")]),t._v(".")]),t._v(" "),e("p",[t._v("The formats supported by different languages are as follows:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("language")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("binary")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("json")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("lua")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("c#")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("java")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("go")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("c++")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("go")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("python")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("typescript")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("rust")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("lua")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("erlang")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("erlang")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("protobuf")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("all")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}}),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),e("h2",{attrs:{id:"detailed-documentation-for-the-luban-command-line-tool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#detailed-documentation-for-the-luban-command-line-tool"}},[t._v("#")]),t._v(" Detailed documentation for the luban command line tool?")]),t._v(" "),e("p",[t._v("See "),e("RouterLink",{attrs:{to:"/en/luban/command_tools/"}},[t._v("luban command line")])],1),t._v(" "),e("h2",{attrs:{id:"how-to-generate-code-and-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-to-generate-code-and-data"}},[t._v("#")]),t._v(" How to generate code and data")]),t._v(" "),e("p",[t._v("See the link above for detailed documentation. There are three tools related to code generation, all in the luban_examples/Tools directory.")]),t._v(" "),e("ul",[e("li",[t._v("Luban.Client. Luban tool client")]),t._v(" "),e("li",[t._v("Luban. Server. Luban tool server side")]),t._v(" "),e("li",[t._v("Luban.ClientServer. The front and back ends of Luban tools are integrated.")])]),t._v(" "),e("p",[t._v("For the sake of simplicity for novices, we introduce the usage of Luban.ClientServer, the command is as follows:")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("dotnet %LUBAN_CLIENT_SERVER_DLL% "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-j")]),t._v(" cfg -- ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" %ROOT_FILE% ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--input_data_dir")]),t._v(" %INPUT_DATA_DIR% ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--output_code_dir")]),t._v(" %OUTPUT_CODE_DIR%\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--output_data_dir")]),t._v(" %OUTPUT_DIR% ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--gen_types")]),t._v(" %GEN_TYPE% ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v(" %GROUP%\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("in:")]),t._v(" "),e("ul",[e("li",[t._v("LUBAN_CLIENT_SERVER_DLL is the path of Luban.ClientServer.dll, which can point to luban_examples/Tools/Luban.ClientServer/Luban.ClientServer.dll")]),t._v(" "),e("li",[t._v("ROOT_FILE is the root definition file, pointing to MyConfigs/Define/__root__.xml")]),t._v(" "),e("li",[t._v("INPUT_DATA_DIR is the root directory of configuration data, pointing to MyConfigs/Datas")]),t._v(" "),e("li",[t._v("OUTPUT_CODE_DIR is the directory where the code is generated")]),t._v(" "),e("li",[t._v('GEN_TYPE is the generation type. If you use unity and want to generate c# code and export json data, use "code_cs_unity_json,data_json"')]),t._v(" "),e("li",[t._v("GROUP for export grouping. The client takes client, the server takes server, and all take all")])]),t._v(" "),e("p",[t._v("For more project types, see "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects",target:"_blank",rel:"noopener noreferrer"}},[t._v("Example Projects"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"generate-c-code-for-unity-project-and-export-json-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generate-c-code-for-unity-project-and-export-json-data"}},[t._v("#")]),t._v(" Generate c# code for unity project and export json data")]),t._v(" "),e("p",[t._v("See above for an introduction to the command line. Your build command is roughly as follows")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("dotnet %LUBAN_CLIENT_SERVER_DLL% "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-j")]),t._v(" cfg -- ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" %ROOT_FILE% ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--input_data_dir")]),t._v(" %INPUT_DATA_DIR% ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--output_code_dir")]),t._v(" %OUTPUT_CODE_DIR%\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--output_data_dir")]),t._v(" %OUTPUT_DIR% ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--gen_types")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"code_cs_unity_json,data_json"')]),t._v(" ^\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v(" client\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v('That is, the --gen_types parameter takes "code_cs_unity_json,data_json", and the -s parameter takes client')]),t._v(" "),e("p",[t._v("For specific projects, see "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects/Csharp_Unity_json",target:"_blank",rel:"noopener noreferrer"}},[t._v("Csharp_Unity_Json"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("For more project types, see "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects",target:"_blank",rel:"noopener noreferrer"}},[t._v("Example Projects"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"generate-ts-code-for-unity-puerts-project-and-generate-json-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generate-ts-code-for-unity-puerts-project-and-generate-json-data"}},[t._v("#")]),t._v(" Generate ts code for unity + puerts project and generate json data")]),t._v(" "),e("p",[t._v('--gen_types parameter takes "code_typescript_json,data_json", -s parameter takes client')]),t._v(" "),e("p",[t._v("For specific projects, see "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects/TypeScript_Unity_Puerts_Json",target:"_blank",rel:"noopener noreferrer"}},[t._v("Typescript_Unity_Puerts_Json"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"generate-c-code-not-blueprint-and-binary-data-for-ue4-project"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generate-c-code-not-blueprint-and-binary-data-for-ue4-project"}},[t._v("#")]),t._v(" Generate c++ code (not blueprint) and binary data for UE4 project")]),t._v(" "),e("p",[t._v("The reference project for the benchmark is "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects/Cpp_Unreal_bin",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cpp_Unreal_bin"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v('Since the generated code depends on some header files, you need to copy Source\\Cpp_Unreal\\Private\\bright from this project to a suitable location for your project. You must ensure that the bright directory is within the include directory path, such as #include "bright/serialization/ByteBuf.h" in the generated code to find this file.')]),t._v(" "),e("p",[t._v('Then the command line parameter takes --gen_types "code_cpp_bin,data_bin"')]),t._v(" "),e("h2",{attrs:{id:"other-types-of-project-types-how-to-generate-code-and-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#other-types-of-project-types-how-to-generate-code-and-data"}},[t._v("#")]),t._v(" Other types of project types, how to generate code and data")]),t._v(" "),e("p",[t._v("Between different projects, only --gen_types are different, please find the project that matches your project from "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects",target:"_blank",rel:"noopener noreferrer"}},[t._v("Example Project"),e("OutboundLink")],1),t._v(" , refer to gen_code.bat in the corresponding directory.")]),t._v(" "),e("h2",{attrs:{id:"generate-protobuf-definition-file-and-protobuf-data-format"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generate-protobuf-definition-file-and-protobuf-data-format"}},[t._v("#")]),t._v(" Generate protobuf definition file and protobuf data format")]),t._v(" "),e("p",[t._v("Currently supports proto2 and proto3 syntax")]),t._v(" "),e("h3",{attrs:{id:"protobuf2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#protobuf2"}},[t._v("#")]),t._v(" protobuf2")]),t._v(" "),e("p",[t._v("Only export in bin format is supported.")]),t._v(" "),e("p",[t._v("Take --gen_types code_protobuf2,data_protobuf_bin, see "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects/Protobuf2_bin",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protobuf2_bin"),e("OutboundLink")],1),t._v(". Each exported data file corresponds to the serialized content of the Table class, just load it. Take the item.TbItem table as an example.")]),t._v(" "),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" tbItem "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ItemTbItem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Parser"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ParseFrom")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("File"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("OpenRead")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pb_datas/item_tbitem.bytes"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h3",{attrs:{id:"protobuf3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#protobuf3"}},[t._v("#")]),t._v(" protobuf3")]),t._v(" "),e("p",[t._v("Both bin format and json format export are supported.")]),t._v(" "),e("ul",[e("li",[t._v("Export in binary format. --gen_types code_protobuf3, data_protobuf_bin")]),t._v(" "),e("li",[t._v("Export in json format. --gen_types code_protobuf3, data_protobuf_json")])]),t._v(" "),e("h2",{attrs:{id:"generate-msgpack-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generate-msgpack-data"}},[t._v("#")]),t._v(" Generate msgpack data")]),t._v(" "),e("p",[t._v("Just take --gen_types data_msgpack. See "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects/MsgPack_bin",target:"_blank",rel:"noopener noreferrer"}},[t._v("MsgPack_bin"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"generate-flatbuffers-definition-file-and-flatbuffers-data-format"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generate-flatbuffers-definition-file-and-flatbuffers-data-format"}},[t._v("#")]),t._v(" Generate flatbuffers definition file and flatbuffers data format")]),t._v(" "),e("p",[t._v("Take --gen_types code_flatbuffers,data_flatbuffers_json, see "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects/Flatbuffers_json",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flatbuffers_json"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Due to the complexity of the binary format, only the json format is supported now, but users can use the flatc tool to convert the data into binary! specially generated convert_json_2_binary.bat\nThe two batch files, convert_json_2_binary.sh and convert_json_2_binary.sh, are convenient for automatic one-click conversion.")]),t._v(" "),e("p",[t._v("At present, because flat_buffers does not support the element type of the container as union, there are some compatibility issues, but it can be solved in a roundabout way by using a bean to contain this union field in the project.")]),t._v(" "),e("p",[t._v("There are some differences in the output format of data_flatbuffers_json and data_json")]),t._v(" "),e("ul",[e("li",[t._v("The top level of data_flatbuffers_json is a table containing the data_list field, and the top level of data_json directly corresponds to the content of data_list")]),t._v(" "),e("li",[t._v('flatbuffers do not support localization. So its text type export format is string, and data_json is {"key":"xxx", "text":"text}')]),t._v(" "),e("li",[t._v("When data_flatbuffers_json serializes bean type fields, if a polymorphic type is encountered, it will serialize an additional xxx_type field of string type to indicate the type of union. This is exactly the case data_flatbuffers_json does not support union in the container")]),t._v(" "),e("li",[t._v("If the data output by data_flatbuffers_json contains container type data and the element type is union, it cannot be parsed correctly.")])]),t._v(" "),e("h2",{attrs:{id:"only-generate-code-or-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#only-generate-code-or-data"}},[t._v("#")]),t._v(" Only generate code or data?")]),t._v(" "),e("p",[t._v("Take "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects/Csharp_Unity_json",target:"_blank",rel:"noopener noreferrer"}},[t._v("Csharp_Unity_Json"),e("OutboundLink")],1),t._v(" as an example.")]),t._v(" "),e("ul",[e("li",[t._v("--gen_types code_cs_unity_json only generate code")]),t._v(" "),e("li",[t._v("--gen_types data_json only generate data")])]),t._v(" "),e("h2",{attrs:{id:"some-string-fields-in-the-configuration-are-resource-addresses-and-these-resource-addresses-are-exported-uniformly"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#some-string-fields-in-the-configuration-are-resource-addresses-and-these-resource-addresses-are-exported-uniformly"}},[t._v("#")]),t._v(" Some string fields in the configuration are resource addresses, and these resource addresses are exported uniformly")]),t._v(" "),e("p",[t._v("When defining the type first, add a tag like '#res=xxx', where xxx can take any value. As follows.")]),t._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("TestRes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("icon"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("string#res=item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("Take '--gen_types data_resources', and add the parameter '--output:data:resource_list_file resources.txt'. Run to export all the data with res tag to the resources.text file.")]),t._v(" "),e("p",[t._v('Assuming that the configuration table contains the two data of icon="/ui/icon1.jpg" and icon="/ui/icon1/jpg", the content of the exported resource list is')]),t._v(" "),e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-txt"}},[e("code",[t._v("item,/ui/icon1.jpg\nitem,/ui/icon2.jpg\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("See example "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects/GenerateDatas",target:"_blank",rel:"noopener noreferrer"}},[t._v("GenerateDatas"),e("OutboundLink")],1),t._v("/gen_resource_list.bat file.")]),t._v(" "),e("h2",{attrs:{id:"in-the-generated-c-code-the-type-of-vector-is-changed-from-system-numerics-vector-2-3-4-to-unityengine-vector-2-3-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#in-the-generated-c-code-the-type-of-vector-is-changed-from-system-numerics-vector-2-3-4-to-unityengine-vector-2-3-4"}},[t._v("#")]),t._v(" In the generated c# code, the type of vector is changed from System.Numerics.Vector{2,3,4} to UnityEngine.Vector{2,3,4}")]),t._v(" "),e("p",[t._v("Add the --cs:use_unity_vector option to the command line parameters. See example "),e("a",{attrs:{href:"https://github.com/focus-creative-games/luban_examples/tree/main/Projects/Csharp_Unity_bin",target:"_blank",rel:"noopener noreferrer"}},[t._v("Csharp_Unity_bin"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"custom-code-naming-style"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom-code-naming-style"}},[t._v("#")]),t._v(" Custom code naming style")]),t._v(" "),e("p",[t._v("Can. Add the option --naming_convention_bean_member none to do it. Make the field names in the generated code the same as the definition names.")]),t._v(" "),e("p",[t._v("The following code naming styles are supported:")]),t._v(" "),e("ul",[e("li",[t._v("none. No naming style, the generated field name is the same as the defined name")]),t._v(" "),e("li",[t._v("language_recommend. That is, according to the generated language, the style recommended by the language is automatically set. For example, c# is PascalCase, java is camelCase, and python is under_scores.")]),t._v(" "),e("li",[t._v("camel Calse. That is, in camel case, a field name in the style of xxxYyyy is generated.")]),t._v(" "),e("li",[t._v("PascalCase. That is, in Pascal form. Generate field names in the style of XxxYyy.")]),t._v(" "),e("li",[t._v("under_scores. underlined form. That is, a field name in the style of xxx_yyy is generated.")])]),t._v(" "),e("p",[t._v("By default language_recommend is used.")]),t._v(" "),e("h2",{attrs:{id:"what-is-the-difference-between-code-cs-json-and-code-cs-unity-json-in-gen-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-is-the-difference-between-code-cs-json-and-code-cs-unity-json-in-gen-types"}},[t._v("#")]),t._v(" What is the difference between code_cs_json and code_cs_unity_json in gen_types")]),t._v(" "),e("p",[t._v("Code_cs_json uses the System.Text.Json library in the generated code, which is only available in versions after .net core 3, and the current .net version of unity does not support it, so this is for server projects based on .net coer.\ncode_cs_unity_json uses the third-party SimpleJson library, which is compatible with the .net version of unity. When generating c# code for loading json data for unity, you can (currently only have this option) choose this.")]),t._v(" "),e("h2",{attrs:{id:"the-meaning-of-j-cfg-in-the-command-line-parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-meaning-of-j-cfg-in-the-command-line-parameters"}},[t._v("#")]),t._v(" The meaning of -j cfg in the command line parameters")]),t._v(" "),e("p",[t._v("The long option corresponding to the -j option is named --job, indicating the generation type. Since luban currently supports three types of generation tasks: message (proto), database (db), and configuration (cfg), the functions of these generation tasks are completely different, and the parameters\nThe difference is quite large, you need to use -j to distinguish different generation tasks.")]),t._v(" "),e("h2",{attrs:{id:"the-top-level-namespace-of-the-generated-configuration-code-is-cfg-can-this-namespace-be-omitted-or-use-other-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-top-level-namespace-of-the-generated-configuration-code-is-cfg-can-this-namespace-be-omitted-or-use-other-values"}},[t._v("#")]),t._v(" The top-level namespace of the generated configuration code is cfg, can this namespace be omitted or use other values?")]),t._v(" "),e("p",[t._v("Yes. The value corresponding to the topmodule configuration item in __root__.xml is the top-level namespace, which can be adjusted to be empty or other values.")]),t._v(" "),e("h2",{attrs:{id:"the-suffix-of-the-generated-data-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-suffix-of-the-generated-data-file"}},[t._v("#")]),t._v(" The suffix of the generated data file")]),t._v(" "),e("p",[t._v("The default file suffix of the data format is as follows")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("data")]),t._v(" "),e("th",[t._v("extension")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("data_bin")]),t._v(" "),e("td",[t._v("bin")])]),t._v(" "),e("tr",[e("td",[t._v("data_json")]),t._v(" "),e("td",[t._v("json")])]),t._v(" "),e("tr",[e("td",[t._v("data_json2")]),t._v(" "),e("td",[t._v("json")])]),t._v(" "),e("tr",[e("td",[t._v("data_lua")]),t._v(" "),e("td",[t._v("lua")])]),t._v(" "),e("tr",[e("td",[t._v("data_xml")]),t._v(" "),e("td",[t._v("xml")])]),t._v(" "),e("tr",[e("td",[t._v("data_yaml")]),t._v(" "),e("td",[t._v("yml")])]),t._v(" "),e("tr",[e("td",[t._v("data_protobuf")]),t._v(" "),e("td",[t._v("bp")])])])]),t._v(" "),e("p",[t._v('The suffix of the output file can be manually specified by the command line option "--data_file_extension xxx".')]),t._v(" "),e("h2",{attrs:{id:"enum-bean-type-code-export-rules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enum-bean-type-code-export-rules"}},[t._v("#")]),t._v(" enum, bean type code export rules")]),t._v(" "),e("p",[t._v("Not all defined types generate code and must satisfy one of the following rules:")]),t._v(" "),e("ul",[e("li",[t._v("the type directly or indirectly referenced by the exported table")]),t._v(" "),e("li",[t._v("The type specified by the ref item of service in root.xml. As shown in the figure below, even if no table directly or indirectly refers to the test.DemoEnum and test.DemoBean types, they will generate code when the server target.")])]),t._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("service")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("managers")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Tables"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("group")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ref")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("test.DemoEnum"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ref")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("test.DemoBean"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h2",{attrs:{id:"different-export-formats-performance-test-results"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#different-export-formats-performance-test-results"}},[t._v("#")]),t._v(" Different export formats Performance test results")]),t._v(" "),e("p",[t._v("hardware:")]),t._v(" "),e("p",[t._v("Intel(R) Core i7-10700 @ 2.9G 16 cores")]),t._v(" "),e("p",[t._v("32G memory")]),t._v(" "),e("p",[t._v("data set")]),t._v(" "),e("p",[t._v("500 excel sheets\nEach table has 1000 rows of relatively large records\nEach table file size 132k")]),t._v(" "),e("p",[t._v("Test Results:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Format")]),t._v(" "),e("th",[t._v("First Elapsed Time")]),t._v(" "),e("th",[t._v("Cumulative Elapsed Time")]),t._v(" "),e("th",[t._v("Individual Output File Size")]),t._v(" "),e("th",[t._v("Total Output File Size")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("bin")]),t._v(" "),e("td",[t._v("15.652 s")]),t._v(" "),e("td",[t._v("797 ms")]),t._v(" "),e("td",[t._v("164 K")]),t._v(" "),e("td",[t._v("59.5 M")])]),t._v(" "),e("tr",[e("td",[t._v("json")]),t._v(" "),e("td",[t._v("17.746 s")]),t._v(" "),e("td",[t._v("796 ms")]),t._v(" "),e("td",[t._v("1.11 M")]),t._v(" "),e("td",[t._v("555 M")])]),t._v(" "),e("tr",[e("td",[t._v("lua")]),t._v(" "),e("td",[t._v("17.323 s")]),t._v(" "),e("td",[t._v("739 ms")]),t._v(" "),e("td",[t._v("433 K")]),t._v(" "),e("td",[t._v("212 M")])])])]),t._v(" "),e("h2",{attrs:{id:"binary-and-json-format-loading-performance-comparison"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binary-and-json-format-loading-performance-comparison"}},[t._v("#")]),t._v(" Binary and json format loading performance comparison?")]),t._v(" "),e("p",[t._v("Take the DesignerConfigs configuration of luban_examples as the test data, and use the csharp_Unity_bin and csharp_Unity_json projects under Projects as the test comparison,\nLoad cfg.Table 100 times.")]),t._v(" "),e("p",[t._v("The binary format takes 28ms, and the json format takes 112ms.")]),t._v(" "),e("p",[t._v("Load performance is about 4:1.")])])}),[],!1,null,null,null);e.default=s.exports}}]);