(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{353:function(t,a,s){"use strict";s.r(a);var n=s(7),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"hybridclr源码结构及调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hybridclr源码结构及调试"}},[t._v("#")]),t._v(" HybridCLR源码结构及调试")]),t._v(" "),a("h2",{attrs:{id:"hybridclr模块介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hybridclr模块介绍"}},[t._v("#")]),t._v(" HybridCLR模块介绍")]),t._v(" "),a("p",[t._v("HybridCLR是基于unity il2cpp运行时的扩展。为了将il2cpp由AOT扩展为AOT+interpreter的混合模式，HybridCLR实现了以下功能：")]),t._v(" "),a("ul",[a("li",[t._v("c++实现的dll解析库")]),t._v(" "),a("li",[t._v("元数据注册。由于il2cpp是静态AOT，原始代码并不支持动态注册，因为做了少量修改（几百行）")]),t._v(" "),a("li",[t._v("指令集转换。将原始IL指令转成更高效的寄存器指令")]),t._v(" "),a("li",[t._v("寄存器解释器。实现了一个高效的解释器。")])]),t._v(" "),a("p",[t._v("目录结构上，与之对应：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("HybridCLR 自身源码")]),t._v(" "),a("ul",[a("li",[t._v("interpreter 解释器模块")]),t._v(" "),a("li",[t._v("metadata 元数据解析与注册模块")]),t._v(" "),a("li",[t._v("transform 指令集转换模块")])])]),t._v(" "),a("li",[a("p",[t._v("对il2cpp源码的修改")]),t._v(" "),a("p",[t._v("HybridCLR对il2cpp源码修改主要为支持动态注册元数据。大多数地方只是插入了hook处理，并未修改原始实现。例如:")])])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" il2cpp"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vm"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalMetadata")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetStringFromIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StringIndex index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ==={{ HybridCLR")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HybridCLR"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("metadata"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsInterpreterIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" HybridCLR"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("metadata"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MetadataModule")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetStringFromEncodeIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ===}} HybridCLR")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IL2CPP_ASSERT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" s_GlobalMetadataHeader"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("stringCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" strings "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("s_GlobalMetadata "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s_GlobalMetadataHeader"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("stringOffset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"transform-实现简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transform-实现简介"}},[t._v("#")]),t._v(" transform 实现简介")]),t._v(" "),a("p",[t._v("跟常规的指令树分析非常相似。分为几部分")]),t._v(" "),a("ul",[a("li",[t._v("BasicBlock划分。将原始IL指令切分为多个BasicBlock，每个BasicBlock不包含任何跳转函数。这么做可以比较高效地避免意外的跨跳块的指令合并")]),t._v(" "),a("li",[t._v("模拟执行所有逻辑分支，包括跳转和异常分支，将每个IL指令转换为对应寄存器指令。")]),t._v(" "),a("li",[t._v("指令优化（待做）。预计于下个月版本开始开发。届时大多数指令可以获得100-300%的性能提升。")])]),t._v(" "),a("h3",{attrs:{id:"interpreter-实现简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interpreter-实现简介"}},[t._v("#")]),t._v(" interpreter 实现简介")]),t._v(" "),a("p",[t._v("比较直接。就是解释执行指令。")]),t._v(" "),a("h2",{attrs:{id:"调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调试"}},[t._v("#")]),t._v(" 调试")]),t._v(" "),a("p",[t._v("HybridCLR解释器核心工作包括两部分：")]),t._v(" "),a("ul",[a("li",[t._v("指令集转换。将基于栈的IL指令转换为基于寄存器的版本。在 HybridCLR/transform/transform.cpp 的 HiTransform::Transform函数。")]),t._v(" "),a("li",[t._v("寄存器指令的解释执行。在 HybridCLR/interpreter/interpreter_Execute.cpp的 Interpreter::Execute函数。")])]),t._v(" "),a("p",[t._v("只要断点到这两个函数，就很容易逐步跟踪IL函数的转换转换到解决执行的整个流程。")]),t._v(" "),a("h3",{attrs:{id:"pc-mac创建调试工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pc-mac创建调试工程"}},[t._v("#")]),t._v(" PC, MAC创建调试工程")]),t._v(" "),a("ul",[a("li",[t._v("准备 Unity 2020.3.33 版本。根据你的平台必须同时安装相应的il2cpp模块。")]),t._v(" "),a("li",[t._v("Project Settings 设置\n"),a("ul",[a("li",[t._v("Scripting Backend 为 IL2Cpp")]),t._v(" "),a("li",[t._v("C++ Compiler Configuration 为 Debug")])])]),t._v(" "),a("li",[t._v('Building Settings 。选中 "Create VisualStudio Solution"，发布完即包含一个源码工程，可供测试。')]),t._v(" "),a("li",[t._v("Build完成后，即产生一个可调试的工程")])]),t._v(" "),a("p",[t._v("想了解更多，可参考"),a("a",{attrs:{href:"https://docs.unity3d.com/2020.3/Documentation/Manual/windowsstore-debugging-il2cpp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unity官方文档"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"android-创建调试工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android-创建调试工程"}},[t._v("#")]),t._v(" Android 创建调试工程")]),t._v(" "),a("ul",[a("li",[t._v("准备 Unity 2020.3.33 版本。根据你的平台必须同时安装相应的il2cpp模块。")]),t._v(" "),a("li",[t._v("Project Settings 设置\n"),a("ul",[a("li",[t._v("Scripting Backend 为 IL2Cpp")]),t._v(" "),a("li",[t._v("C++ Compiler Configuration 为 Debug")])])]),t._v(" "),a("li",[t._v('Building Settings 。选中 "Export Project"，发布完即包含一个源码工程，可供测试。')]),t._v(" "),a("li",[t._v("Build完成后，使用Android Studio打开工程。下面操作都在Android Studio中进行")]),t._v(" "),a("li",[t._v("假设打包输出路径为build_android，在Android Studio中选择 Build->Make Module 'build_android.unityLibrary'，编译unityLibrary，等待编译完成")]),t._v(" "),a("li",[t._v("选择Run->Edit Configurations...；按下图所示进行设置")])]),t._v(" "),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"/img/hybridclr/android_studio_debug.png",alt:"android studio debug"}})])]),a("ul",[a("li",[t._v("正常debug即可进行断点，源码路径如下所示")])]),t._v(" "),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"/img/hybridclr/android_studio_project.png",alt:"android studio debug"}})])])])}),[],!1,null,null,null);a.default=r.exports}}]);