(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{364:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"aot泛型问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aot泛型问题"}},[s._v("#")]),s._v(" AOT泛型问题")]),s._v(" "),t("p",[s._v("CLR中有两类泛型特性：泛型类型和泛型函数。泛型是c#中使用极其广泛的特性，即使一个没有明显包含泛型的用法，也可能隐含了泛型相关的定义或者操作。")]),s._v(" "),t("p",[s._v("在CLR中，一个泛型类型的新的实例化类型隐含着需要在内存中创建了这个泛型实例化类型的元数据。对于"),t("strong",[s._v("热更新代码中定义")]),s._v("的泛型类，HybirdCLR天然支持了它的泛型实例化，但是对于"),t("strong",[s._v("AOT泛型")]),s._v("的实例化，则遇到了一些问题。")]),s._v(" "),t("p",[s._v("il2cpp是AOT运行时，它运行时使用的几乎所有（为什么不是全部？）类型都是编译期已经静态确定的。你在AOT中只实例化过"),t("code",[s._v("List<int>")]),s._v(" 和 "),t("code",[s._v("List<string>")]),s._v("，在热更新代码中是不能使用类似 "),t("code",[s._v("new List<float>()")]),s._v(" 这样的代码的。")]),s._v(" "),t("p",[s._v("尽管il2cpp可以在内存中创建出"),t("code",[s._v("List<float>")]),s._v("类型的大多数元数据，但它无法创建出它的各个成员函数实现。\n你可以通过反射获得"),t("code",[s._v("typeof(List<float>)")]),s._v("，却无法调用它的任何成员函数，包括构造函数。")]),s._v(" "),t("p",[s._v("无法创建出AOT泛型类型的成员函数实现的本质原因是il2cpp在完成IL到c++代码的转换后，丢失了原始IL函数体信息，\n导致无法根据泛型基类"),t("code",[s._v("List<>")]),s._v("的元数据实例化出"),t("code",[s._v("List<float>")]),s._v("的各个成员函数实现。")]),s._v(" "),t("p",[s._v("泛型类，尤其是泛型容器List、Dictionary之类在代码中使用如此广泛，如果因为AOT限制，导致List<HotUpdateType>之类的都不能运行，那游戏热更新的代码限制也太大了。幸运的是，HybridCLR使用两类技术彻底解决了这个问题：")]),s._v(" "),t("ul",[t("li",[s._v("基于il2cpp的"),t("code",[s._v("泛型共享")]),s._v("技术")]),s._v(" "),t("li",[s._v("基于"),t("code",[s._v("补充元数据")]),s._v("技术，这也是HybridCLR的专利技术")])]),s._v(" "),t("h2",{attrs:{id:"il2cpp的泛型共享机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#il2cpp的泛型共享机制"}},[s._v("#")]),s._v(" il2cpp的泛型共享机制")]),s._v(" "),t("p",[s._v("il2cpp为了避免泛型代码膨胀，节约内存，在保证代码逻辑正确性的情况下对于一些能够共享代码，只生成一份代码。为此引入一个概念叫"),t("strong",[s._v("泛型代码共享")]),s._v(" "),t("a",{attrs:{href:"https://blog.unity.com/technology/il2cpp-internals-generic-sharing-implementation",target:"_blank",rel:"noopener noreferrer"}},[s._v("Generic Sharing"),t("OutboundLink")],1),s._v(",此技术更早则源于mono。CLR中也有同样的概念，CLR认为所有引用类型实参都一样，所以可以代码共享，例如，为List<String>方法编译的代码可以直接用于List<Stream>方法，这是因为所有引用类型实参/变量只是指向托管堆的一个8字节指针（这里假设64位系统），但是对于值类型，则必须每种类型都进行代码生成，因为值类型大小不定。")]),s._v(" "),t("p",[s._v("以List<T> 举例：")]),s._v(" "),t("ul",[t("li",[s._v("可以使用AOT中使用过的任何List的实例化类型。例如你在AOT里用过List<vector3>,则热更新里也可以用")]),s._v(" "),t("li",[s._v("可以使用任意List<HotUpdateEnum>。 只需要你在AOT里实例化某一个List<相同underlying type的枚举类型>。")]),s._v(" "),t("li",[s._v("可以使用任意引用类型的泛型参数List<HotUpdateClass>。 只需要你在AOT里实例化过 List<object>(或任意一个引用泛型参数如List<string>)")])]),s._v(" "),t("h3",{attrs:{id:"共享类型计算规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#共享类型计算规则"}},[s._v("#")]),s._v(" 共享类型计算规则")]),s._v(" "),t("p",[s._v("假设泛型类 T 的共享类型为share type， 计算规则如下:")]),s._v(" "),t("h4",{attrs:{id:"非枚举的值类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非枚举的值类型"}},[s._v("#")]),s._v(" 非枚举的值类型")]),s._v(" "),t("p",[s._v("share type为自身。如int的share type为int")]),s._v(" "),t("h4",{attrs:{id:"枚举类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型"}},[s._v("#")]),s._v(" 枚举类型")]),s._v(" "),t("p",[s._v("share type为 underlying type与它相同的枚举。例如")]),s._v(" "),t("div",{staticClass:"language-csharp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyEnum")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    A "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyEnum2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sbyte")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    A "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("由于enum的默认underlying type是int，因此MyEnum的share type为 Int32Enum,MyEnum2的share type为 SByteEnum。注意，CLI中并没有Int32Enum、SByteEnum这些类型，需要你的AOT中提前创建一个这样的枚举类型。")]),s._v(" "),t("h4",{attrs:{id:"class引用类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class引用类型"}},[s._v("#")]),s._v(" class引用类型")]),s._v(" "),t("p",[s._v("share type为 object")]),s._v(" "),t("h4",{attrs:{id:"泛型类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型类型"}},[s._v("#")]),s._v(" 泛型类型")]),s._v(" "),t("p",[s._v("GenericType<T1,T2,...> 如果是class类型则share type为object，否则share type为 GenericType<shareType<T1>, shareType<T2>...>。")]),s._v(" "),t("p",[s._v("例如")]),s._v(" "),t("ul",[t("li",[s._v("Dictionary<int, string>的share type为object。")]),s._v(" "),t("li",[s._v("YourValueType<int, string>的share type为YourValueType<int,object>")])]),s._v(" "),t("h3",{attrs:{id:"泛型函数的共享泛型函数-计算规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型函数的共享泛型函数-计算规则"}},[s._v("#")]),s._v(" 泛型函数的共享泛型函数 计算规则")]),s._v(" "),t("p",[s._v("对于 "),t("code",[s._v("Class<C1, C2, ...>.Method<M1, M2, ...>(A1, A2, ...)")]),s._v(" 的AOT泛型函数为\n"),t("code",[s._v("Class<share(C1), share(C2), ...>.Method<share(M1), share(M2), ...>(share(A1), share(A2), ...)")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("List<string>.ctor")]),s._v(" 对应共享函数为 "),t("code",[s._v("List<object>.ctor")])]),s._v(" "),t("li",[t("code",[s._v("List<int>.Add(int)")]),s._v(" 对应共享函数为 "),t("code",[s._v("List<int>.Add(int)")])]),s._v(" "),t("li",[t("code",[s._v("YourGenericClass<string, int, List<int>>.Show<string, List<int>, int>(ValueTuple<int, string>, string, int)")]),s._v(" 的共享函数为 "),t("code",[s._v("YourGenericClass<object, int, object>.Show<object, object, int>(ValueTuple<int, object>, object, int)")])])]),s._v(" "),t("h3",{attrs:{id:"il2cpp中值类型不支持泛型共享的原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#il2cpp中值类型不支持泛型共享的原因"}},[s._v("#")]),s._v(" il2cpp中值类型不支持泛型共享的原因")]),s._v(" "),t("p",[s._v("不同大小的值类型不能共享这容易理解，但为何相同大小的值类型不能像class那样泛型共享呢？主要有两个原因。")]),s._v(" "),t("h4",{attrs:{id:"内存对齐引发的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存对齐引发的问题"}},[s._v("#")]),s._v(" 内存对齐引发的问题")]),s._v(" "),t("p",[s._v("值类型就算大小相同，如果对齐方式(aligment)不一样，作为其他类的子字段时，最终所在的类的内存大小和布局可能不同。\n另外不同ABI下函数传参时，aligment也会导致传参方式不同。例如：")]),s._v(" "),t("div",{staticClass:"language-csharp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// size = 4, alignment = 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")])]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")])]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// size = 4，alignment = 4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")])]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GenericDemo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")])]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[t("code",[s._v("GenericDemo<A>")]),s._v(" size=6，alignment=2，字段v在类中偏移为2；而 "),t("code",[s._v("GenericDemo<B>")]),s._v(" size=8，alignment=4， v字段在类中偏移为4。显然对于GetValue函数，由于v的偏移不同，无法用一套相同的c++代码对这两个类都能正确工作。")]),s._v(" "),t("h4",{attrs:{id:"abi-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#abi-问题"}},[s._v("#")]),s._v(" ABI 问题")]),s._v(" "),t("p",[s._v("相同大小及对齐的结构体，在"),t("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/cpp/build/x64-software-conventions?redirectedfrom=MSDN&view=msvc-170",target:"_blank",rel:"noopener noreferrer"}},[s._v("x64 ABI"),t("OutboundLink")],1),s._v("是等效的，可以用同等大小的结构体来作共享泛型实例化。但在"),t("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/cpp/build/arm64-windows-abi-conventions?view=msvc-170",target:"_blank",rel:"noopener noreferrer"}},[s._v("arm64 ABI"),t("OutboundLink")],1),s._v("却是不行的。")]),s._v(" "),t("p",[t("code",[s._v("struct IntVec3 { int32_t x, y, z; }")]),s._v(" 和 "),t("code",[s._v("struct FloatVec3 { float x, y, z}")]),s._v(" 它们虽然大小都是12，但作为函数参数传递时，传参方式是不一样的：")]),s._v(" "),t("ul",[t("li",[s._v("IntVec3 以引用的方式传参")]),s._v(" "),t("li",[s._v("FloatVec3 的三个字段，分别放到三个浮点寄存器里")])]),s._v(" "),t("p",[s._v("这个是结构体无法泛型共享的另一个关键原因。")]),s._v(" "),t("h3",{attrs:{id:"async与ienumerable之类机制引发的aot泛型问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async与ienumerable之类机制引发的aot泛型问题"}},[s._v("#")]),s._v(" async与IEnumerable之类机制引发的AOT泛型问题")]),s._v(" "),t("p",[s._v("编译器可能为会async之类的复杂语法糖生成隐含的AOT泛型引用。故为了让这些机制能够正常工作，也必须解决它们引发的AOT泛型实例化问题。")]),s._v(" "),t("p",[s._v("以async为例，编译器为async生成了若干类及状态机及一些代码，这些隐藏生成的代码中包含了对多个AOT泛型函数的调用，常见的有：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("void AsyncTaskMethodBuilder::Start<TStateMachine>(ref TStateMachine stateMachine)")])]),s._v(" "),t("li",[t("code",[s._v("void AsyncTaskMethodBuilder::AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)")])]),s._v(" "),t("li",[t("code",[s._v("void AsyncTaskMethodBuilder::SetException(Exception exception)")])]),s._v(" "),t("li",[t("code",[s._v("void AsyncTaskMethodBuilder::SetResult()")])]),s._v(" "),t("li",[t("code",[s._v("void AsyncTaskMethodBuilder<T>::Start<TStateMachine>(ref TStateMachine stateMachine)")])]),s._v(" "),t("li",[t("code",[s._v("void AsyncTaskMethodBuilder<T>::AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)")])]),s._v(" "),t("li",[t("code",[s._v("void AsyncTaskMethodBuilder<T>::SetException(Exception exception)")])]),s._v(" "),t("li",[t("code",[s._v("void AsyncTaskMethodBuilder<T>::SetResult(T result)")])])]),s._v(" "),t("p",[s._v("使用标准的解决AOT泛型的方法来解决这些问题即可。强烈推荐使用补充元数据机制。")]),s._v(" "),t("p",[s._v("你也可以使用泛型共享机制，即在AOT里提前实例化这些函数，不过要"),t("strong",[s._v("注意")]),s._v("，c#编译器对release模式下生成的状态机是ValueType类型，导致无法泛型共享，但debug模式下生成的状态机是class类型，可以泛型共享。因此如果使用泛型共享机制，为了能够让热更新中使用async语法，使用脚本编译dll时，务必加上 "),t("code",[s._v("scriptCompilationSettings.options = ScriptCompilationOptions.DevelopmentBuild;")]),s._v(" 代码，这样编译出的状态机是class类型，在热更新代码中能正常工作。如果已经使用"),t("code",[s._v("补充元数据技术")]),s._v("，由于彻底支持AOT泛型，则对编译方式"),t("strong",[s._v("无限制")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("强烈")]),s._v("推荐使用补充元数据机制，同时关闭 DevelopmentBuild 选项。")]),s._v(" "),t("h3",{attrs:{id:"aot泛型实例化示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aot泛型实例化示例"}},[s._v("#")]),s._v(" AOT泛型实例化示例")]),s._v(" "),t("h4",{attrs:{id:"示例1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例1"}},[s._v("#")]),s._v(" 示例1")]),s._v(" "),t("p",[s._v("错误日志")]),s._v(" "),t("div",{staticClass:"language-csharp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[s._v("MissingMethodException"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" AOT generic method isn'"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("t")]),s._v(" instantiated "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" aot module \n  "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Collections"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Generic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("List"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ctor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("你在RefType里加上 "),t("code",[s._v("List<string>.ctor()")]),s._v(" 的调用，即 "),t("code",[s._v("new List<string>()")]),s._v("。由于"),t("strong",[s._v("泛型共享机制")]),s._v("，你调用 "),t("code",[s._v("new List<object>()")]),s._v(" 即可。")]),s._v(" "),t("div",{staticClass:"language-csharp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RefTypes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MyAOTRefs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("List"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 也可以用 new List<string>()")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h4",{attrs:{id:"示例2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例2"}},[s._v("#")]),s._v(" 示例2")]),s._v(" "),t("p",[s._v("错误日志")]),s._v(" "),t("div",{staticClass:"language-csharp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[s._v("MissingMethodException"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" AOT generic method isn'"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("t")]),s._v(" instantiated "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" aot module \n    "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ValueType"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Int32"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ctor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("注意！值类型的空构造函数没有调用相应的构造函数，而是对应 initobj指令。实际上你无法直接引用它，但你只要强制实例化这个类型就行了，preserve这个类的所有函数，自然就会包含.ctor函数了。")]),s._v(" "),t("p",[s._v("实际中你可以用强制装箱 "),t("code",[s._v("(object)(default(ValueTuple<int, object>))")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-csharp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RefTypes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MyAOTRefs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 以下两种写法都是可以的")]),s._v("\n      _ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("ValueTuple"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      _ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[s._v("ValueTuple"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h4",{attrs:{id:"示例3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例3"}},[s._v("#")]),s._v(" 示例3")]),s._v(" "),t("p",[s._v("错误日志")]),s._v(" "),t("div",{staticClass:"language-csharp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[s._v("MissingMethodException"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" AOT generic method isn'"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("t")]),s._v(" instantiated "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" aot module \n  System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Void System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Runtime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CompilerService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("AsyncVoidMethodBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("Start"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("UIMgr"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("ShowUId__2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("UIMgr"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ShowUI"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("d__2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("div",{staticClass:"language-csharp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RefTypes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("MyAOTRefs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")])]),s._v(" builder "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Runtime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CompilerService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("AsyncVoidMethodBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IAsyncStateMachine")]),s._v(" asm "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      builder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ref")]),s._v(" asm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"泛型共享机制的缺陷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型共享机制的缺陷"}},[s._v("#")]),s._v(" 泛型共享机制的缺陷")]),s._v(" "),t("p",[s._v("由于值类型不能泛型共享，泛型实例（类或函数）的泛型参数中如果出现值类型，这个泛型实例必须提前在AOT提前实例化。如果\n你的泛型参数类型是热更新代码中定义的值类型，由于热更新类型显然不可能提前在AOT中泛型实例化，导致你在热更新代码\n中无法使用 "),t("code",[s._v("List<热更新值类型>")]),s._v(" 这样的代码，给开发带来极多的不便。")]),s._v(" "),t("p",[s._v("所幸，我们创新性地提出"),t("code",[s._v("补充元数据")]),s._v("专利技术，彻底解决了这个问题。")]),s._v(" "),t("h2",{attrs:{id:"基于补充元数据的泛型函数实例化技术-hybridclr的专利技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于补充元数据的泛型函数实例化技术-hybridclr的专利技术"}},[s._v("#")]),s._v(" 基于补充元数据的泛型函数实例化技术（HybridCLR的专利技术)")]),s._v(" "),t("p",[s._v("AOT泛型函数无法实例化的问题本质上因为il2cpp执行"),t("code",[s._v("IL -> C++")]),s._v("翻译过程中丢失了原始MethodBody IL元数据。解决思路很透彻——补充上丢失的原始MethodBody IL元数据。")]),s._v(" "),t("p",[s._v("注意，是泛型函数丢失了IL函数体元数据，而不是泛型参数类型丢失了元数据。以"),t("code",[s._v("var a = new List<YourValueType>()")]),s._v("为例，\n是 "),t("code",[s._v("List<T>.ctor")]),s._v("(CLI中类构造函数名叫.ctor) 函数缺失了原始IL函数体元数据，而不是"),t("code",[s._v("YourValueType")]),s._v("丢失了元数据。因此\n补充元数据应该补充泛型类所在的aot dll，例如"),t("code",[s._v("List<T>")]),s._v("所在dll为"),t("code",[s._v("mscorlib")]),s._v("，而不是补充"),t("code",[s._v("YourValueType")]),s._v("所在的dll。")]),s._v(" "),t("p",[s._v("使用 hybridclr_unity package中的 "),t("code",[s._v("HybridCLR.RuntimeApi.LoadMetadataForAOTAssembly")]),s._v("函数为AOT的assembly补充对应的元数据。\nLoadMetadataForAOTAssembly函数可以在任何时机调用，另外既可以在AOT中调用，也可以在热更新中调用，你只要在使用AOT泛型前调用即可（只需要调用一次）。")]),s._v(" "),t("p",[s._v("理论上越早加载越好，实践中比较合理的时机是热更新完成后，或者热更新dll加载后但还未执行任何代码前。如果补充元数据的dll作为额外数据文件也打入了主包（例如放到StreamingAssets下)，则主工程启动时加载更优。")]),s._v(" "),t("p",[t("strong",[s._v("补充元数据没有加载顺序的要求")]),s._v("。")]),s._v(" "),t("p",[s._v("如果AOT泛型补充相应的泛型元数据，同时il2cpp泛型共享实例化也存在，为了最大程度提升性能，HybridCLR会优先尝试il2cpp泛型共享。")]),s._v(" "),t("p",[s._v("基于补充元数据的泛型函数实例化技术虽然相当完美，但毕竟实例化的函数以解释方式执行，如果能提前在AOT中泛型实例化，可以大幅提升性能。\n所以推荐对于常用尤其是性能敏感的泛型类和函数，提前在AOT中实例化。我们提供了工具帮助自动扫描收集相应的泛型实例，你运行菜单命令"),t("code",[s._v("HybridCLR/Generate/AOTGenericReference")]),s._v("即可。")]),s._v(" "),t("h3",{attrs:{id:"元数据模式-homologousimagemode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元数据模式-homologousimagemode"}},[s._v("#")]),s._v(" 元数据模式 HomologousImageMode")]),s._v(" "),t("p",[s._v("目前支持两种元数据模式：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("HomologousImageMode::Consistent")]),s._v(" 模式，即补充的dll与打包时裁剪后的dll精确一致。因此必须使用build过程中生成的裁剪后的dll，则不能直接复制原始dll。我们在"),t("code",[s._v("HybridCLR.BuildProcessors.CopyStrippedAOTAssemblies")]),s._v("里添加了处理代码，在打包时自动将这些裁剪后的dll复制到 "),t("code",[s._v("{project}/HybridCLRData/AssembliesPostIl2CppStrip/{target}")]),s._v(" 目录。")]),s._v(" "),t("li",[t("code",[s._v("HomologousImageMode::SuperSet")]),s._v(" 模式，即补充的dll是打包时裁剪后的dll的超集，包含了裁剪dll的所有元数据。一个最简单易得的超集dll为原始aot dll，这也是推荐使用的超集dll。原始aot dll的位置请参见详细文档。")])]),s._v(" "),t("p",[s._v("详细文档请参见"),t("RouterLink",{attrs:{to:"/hybridclr/hybridclr_unity/"}},[s._v("hybridclr_unity")]),s._v("。")],1),s._v(" "),t("h3",{attrs:{id:"加载补充元数据示例代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载补充元数据示例代码"}},[s._v("#")]),s._v(" 加载补充元数据示例代码")]),s._v(" "),t("p",[s._v("代码中加载补充元数据dll的方式见以下示例代码，你也可以参考 "),t("a",{attrs:{href:"https://github.com/focus-creative-games/hybridclr_trial",target:"_blank",rel:"noopener noreferrer"}},[s._v("hybridclr_trial"),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("div",{staticClass:"language-csharp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-csharp"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("LoadMetadataForAOTAssembly")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" aotDllList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("List"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mscorlib.dll"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"System.dll"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"System.Core.dll"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果使用了Linq，需要这个")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "Newtonsoft.Json.dll",')]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "protobuf-net.dll",')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssetBundle")]),s._v(" dllAB "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" LoadDll"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("AssemblyAssetBundle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("foreach")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")])]),s._v(" aotDllName "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" aotDllList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v(" dllBytes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" dllAB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("LoadAsset")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TextAsset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("aotDllName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")])]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" HybridCLR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("RuntimeApi"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("LoadMetadataForAOTAssembly")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dllBytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" HomologousImageMode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("SuperSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n              Debug"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token interpolation-string"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('$"LoadMetadataForAOTAssembly:')]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token expression language-csharp"}},[s._v("aotDllName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(". ret:")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token expression language-csharp"}},[s._v("err")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h2",{attrs:{id:"full-generic-share-技术补充介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#full-generic-share-技术补充介绍"}},[s._v("#")]),s._v(" "),t("code",[s._v("full generic share")]),s._v(" 技术补充介绍")]),s._v(" "),t("p",[s._v("自2021.3.x LTS版本起，il2cpp已经完全支持"),t("code",[s._v("full generic share")]),s._v("技术，当 Build Settings中 "),t("code",[s._v("Il2Cpp Code Generation")]),s._v(" 选项为 "),t("code",[s._v("faster runtime")]),s._v(" 时为之前章节介绍的泛型共享机制，为 "),t("code",[s._v("faster(smaller) build")]),s._v(" 时开启\n"),t("code",[s._v("full generic share")]),s._v(" 机制。")]),s._v(" "),t("p",[s._v("当开启"),t("code",[s._v("full generic share")]),s._v("后每个泛型函数（无论泛型参数是值类型还是class类型）都会完全共享一份代码，优点是节约代码大小，缺点是极大地伤害了泛型函数的性能。完全泛型共享的代码相比于标准泛型共享代码有时候会慢几倍到十几倍，甚至比不上纯解释版本。因此强烈推荐"),t("strong",[s._v("不要开启")]),s._v(" "),t("code",[s._v("faster(smaller) build")]),s._v(" 选项。也正因如此，HybridCLR虽然能跟"),t("code",[s._v("full generic share")]),s._v(" 机制配合工作，但完全没有利用这种机制。因为这种机制除了想极端减少包体的场合，基本没有实践意义。")])])}),[],!1,null,null,null);t.default=e.exports}}]);