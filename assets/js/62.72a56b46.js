(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{382:function(t,e,v){"use strict";v.r(e);var _=v(7),a=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"特性说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特性说明"}},[t._v("#")]),t._v(" 特性说明")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"多种数据源支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多种数据源支持"}},[t._v("#")]),t._v(" 多种数据源支持")]),t._v(" "),e("p",[t._v("支持excel族、json、xml、lua、yaml、unity asset 多种数据格式，基本统一了游戏常见的配置数据。")]),t._v(" "),e("h2",{attrs:{id:"增强的excel格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#增强的excel格式"}},[t._v("#")]),t._v(" 增强的excel格式")]),t._v(" "),e("p",[t._v("可以在excel里比较简洁填写出任意复杂的嵌套数据。")]),t._v(" "),e("h2",{attrs:{id:"强大完备的类型系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强大完备的类型系统"}},[t._v("#")]),t._v(" 强大完备的类型系统")]),t._v(" "),e("p",[t._v("可以优雅表达任意复杂的数据结构。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("基础内置类型")]),t._v(" "),e("ul",[e("li",[t._v("bool,byte,short,fshort,int,fint,long,flong,float,double,string,text,bytes")]),t._v(" "),e("li",[t._v("vector2, vector3,vector4")]),t._v(" "),e("li",[t._v("datetime")])])]),t._v(" "),e("li",[e("p",[t._v("可空类型")]),t._v(" "),e("p",[t._v("除了容器类型以外的类型，都支持相应的可空数据结构。如 bool?, string?, MyEnum? MyBean? 。")])]),t._v(" "),e("li",[e("p",[t._v("自定义枚举 enum")])]),t._v(" "),e("li",[e("p",[t._v("自定义结构 bean")]),t._v(" "),e("ul",[e("li",[t._v("可以定义所有类型的字段")]),t._v(" "),e("li",[e("strong",[t._v("支持无限制的结构继承")]),t._v(",对于表达中大型项目的复杂数据(技能,buff,ai 等等) 极其有用。 (比如基类Shape, 子类 Circle,Rectangle")])])]),t._v(" "),e("li",[e("p",[t._v("支持容器类型 array。 value 可以为内置类型，也可以为自定义类型")])]),t._v(" "),e("li",[e("p",[t._v("支持容器类型 list。 value 可以为内置类型，也可以为自定义类型")])]),t._v(" "),e("li",[e("p",[t._v("支持容器类型 set。 value 只能为内置类型或者enum类型，不支持 bean 类型")])]),t._v(" "),e("li",[e("p",[t._v("支持容器类型 map。 key 只能为内置类型或者enum类型，不支持 bean 类型。 value 可以为内置类型，也可以为自定义类型")])])]),t._v(" "),e("h2",{attrs:{id:"支持多种导出数据格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持多种导出数据格式"}},[t._v("#")]),t._v(" 支持多种导出数据格式")]),t._v(" "),e("ul",[e("li",[t._v("支持生成"),e("strong",[t._v("protobuf")]),t._v("、"),e("strong",[t._v("msgpack")]),t._v("、"),e("strong",[t._v("flatbuffers")]),t._v("相应的定义文件及相应的数据文件（直接反射导出，高效，并不需要生成代码后再利用生成的代码加载导出）")]),t._v(" "),e("li",[t._v("多种导出数据格式支持。支持binary、json、"),e("strong",[t._v("protobuf")]),t._v("、"),e("strong",[t._v("msgpack")]),t._v("、"),e("strong",[t._v("flatbuffers")]),t._v("、lua、xml、erlang、"),e("strong",[t._v("xlsx")]),t._v(" 及自定义的导出数据格式")]),t._v(" "),e("li",[t._v("支持xlsx与json、lua、xml、yaml等格式之间互转")]),t._v(" "),e("li",[t._v("导出配置中所有资源字符串列表")])]),t._v(" "),e("h2",{attrs:{id:"灵活的配置文件组织形式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#灵活的配置文件组织形式"}},[t._v("#")]),t._v(" 灵活的配置文件组织形式")]),t._v(" "),e("p",[t._v("支持以下几种组织形式，允许开发者根据情况灵活组织配置文件结构。例如可以一个表对应一个xlsx文件；可以多个表都放到同个xlsx文件；可以一个表对应多个xlsx文件；可以一个表对应一个目录。")]),t._v(" "),e("ul",[e("li",[t._v("来自某个excel文件的所有单元薄")]),t._v(" "),e("li",[t._v("来自某个excel文件的指定单元薄")]),t._v(" "),e("li",[t._v("来自json、xml、lua、yaml文件")]),t._v(" "),e("li",[t._v("来自json、xml、lua、yaml子字段 (如root.a.b)")]),t._v(" "),e("li",[t._v("来自目录树下所有文件，每个文件对应一个记录")]),t._v(" "),e("li",[t._v("以上的随意组合")])]),t._v(" "),e("h2",{attrs:{id:"分组导出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分组导出"}},[t._v("#")]),t._v(" 分组导出")]),t._v(" "),e("p",[t._v("灵活的分组定义，不仅仅是client和server分组。支持以下分组粒度：")]),t._v(" "),e("ul",[e("li",[t._v("表级别分组")]),t._v(" "),e("li",[t._v("字段级别分组(任意bean字段粒度，而不仅限于顶层字段)")])]),t._v(" "),e("h2",{attrs:{id:"强大的数据校验器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强大的数据校验器"}},[t._v("#")]),t._v(" 强大的数据校验器")]),t._v(" "),e("ul",[e("li",[t._v("ref 。id合法性检查")]),t._v(" "),e("li",[t._v("path 。资源合法性检查")]),t._v(" "),e("li",[t._v("range 。 数据范围检查")]),t._v(" "),e("li",[t._v("set 。 数据集合检查")]),t._v(" "),e("li",[t._v("size 。 容器大小检查")])]),t._v(" "),e("h2",{attrs:{id:"支持多种常见数据表模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持多种常见数据表模式"}},[t._v("#")]),t._v(" 支持多种常见数据表模式")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("singleton(单例表)")])]),t._v(" "),e("li",[e("p",[t._v("map（常规key-value表）")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("list(支持无索引、多主键联合索引、多主键独立索引)")])])])]),t._v(" "),e("h2",{attrs:{id:"支持external-type-即外部类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持external-type-即外部类"}},[t._v("#")]),t._v(" 支持"),e("strong",[t._v("external type")]),t._v("，即外部类")]),t._v(" "),e("ul",[e("li",[t._v("支持外部enum类型。你可以在配置中引用现成的enum类，比如UnityEngine.AudioType。")]),t._v(" "),e("li",[t._v("支持外部class类型。你可以在配置中引用现成的class类，比如 UnityEngine.Color。")])]),t._v(" "),e("h2",{attrs:{id:"数据标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据标签"}},[t._v("#")]),t._v(" 数据标签")]),t._v(" "),e("p",[t._v("支持数据标签。 可以选择导出符合要求的数据，发布正式数据时策划不必手动注释掉那些测试数据了")]),t._v(" "),e("h2",{attrs:{id:"代码与数据模板-强大灵活的定制能力"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码与数据模板-强大灵活的定制能力"}},[t._v("#")]),t._v(" 代码与数据模板，强大灵活的定制能力")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("支持代码模板，可以用自定义模板定制生成的代码格式")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("支持数据模板")]),t._v("，可以用模板文件定制导出格式。意味着可以在不改动现有程序代码的情况下，把luban当作"),e("strong",[t._v("配置处理前端")]),t._v("，生成自定义格式的数据与自己项目的配置加载代码配合工作。开发已久的项目或者已经上线的老项目，也能从luban强大的数据处理工作流中获益")])])]),t._v(" "),e("h2",{attrs:{id:"完善的本地化支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完善的本地化支持"}},[t._v("#")]),t._v(" 完善的本地化支持")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("支持时间本地化。datetime类型数据会根据指定的timezone，转换为目标地区该时刻的UTC时间，方便程序使用。")])]),t._v(" "),e("li",[e("p",[t._v("支持文本静态本地化。导出时所有text类型数据正确替换为最终的本地化字符串。绝大多数的业务功能不再需要运行根据本地化id去查找文本的内容，简化程序员的工作。")])]),t._v(" "),e("li",[e("p",[t._v("支持文本动态本地化。运行时动态切换所有text类型数据为目标本地化字符串。")])]),t._v(" "),e("li",[e("p",[t._v("支持 main + patches 数据合并。在基础数据上，施加差分数据，生成最终完整数据，适用于制作有细微不同的多地区的配置数据。")])]),t._v(" "),e("li",[e("p",[t._v("[TODO] 【独创】 支持任意粒度和任意类型数据（如int,bean,list,map）的本地化。")])])]),t._v(" "),e("h2",{attrs:{id:"极高的生成性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#极高的生成性能"}},[t._v("#")]),t._v(" 极高的生成性能")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("支持云生成。 利用远程生成缓存，MMORPG这样大型项目也能秒内生成，日志增量生成基本在300ms以内。")])]),t._v(" "),e("li",[e("p",[t._v("支持本地生成。支持常规的本地缓存增量生成模式。")])]),t._v(" "),e("li",[e("p",[t._v("支持"),e("strong",[t._v("watch监测模式")]),t._v("，数据目录变化立即重新生成。")])])]),t._v(" "),e("h2",{attrs:{id:"支持主流的游戏开发语言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持主流的游戏开发语言"}},[t._v("#")]),t._v(" 支持主流的游戏开发语言")]),t._v(" "),e("ul",[e("li",[t._v("c++ (11+)")]),t._v(" "),e("li",[t._v("c# (.net framework 4+. dotnet core 3+)")]),t._v(" "),e("li",[t._v("java (1.6+)")]),t._v(" "),e("li",[t._v("go (1.10+)")]),t._v(" "),e("li",[t._v("lua (5.1+)")]),t._v(" "),e("li",[t._v("js 和 typescript (3.0+)")]),t._v(" "),e("li",[t._v("python (2.7,3.0+)")]),t._v(" "),e("li",[t._v("erlang (18+)")]),t._v(" "),e("li",[t._v("rust (1.5+)")]),t._v(" "),e("li",[t._v("其他protobuf、msgpack、flatbuffers支持的语言")])]),t._v(" "),e("h2",{attrs:{id:"支持主流引擎和平台"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持主流引擎和平台"}},[t._v("#")]),t._v(" 支持主流引擎和平台")]),t._v(" "),e("ul",[e("li",[t._v("unity + c#")]),t._v(" "),e("li",[t._v("unity + "),e("a",{attrs:{href:"https://github.com/topameng/tolua",target:"_blank",rel:"noopener noreferrer"}},[t._v("tolua"),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://github.com/Tencent/xLua",target:"_blank",rel:"noopener noreferrer"}},[t._v("xlua"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("unity + "),e("a",{attrs:{href:"https://github.com/Ourpalm/ILRuntime",target:"_blank",rel:"noopener noreferrer"}},[t._v("ILRuntime"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("unity + "),e("a",{attrs:{href:"https://github.com/Tencent/puerts",target:"_blank",rel:"noopener noreferrer"}},[t._v("puerts"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("unity + "),e("a",{attrs:{href:"https://github.com/EllanJiang/GameFramework",target:"_blank",rel:"noopener noreferrer"}},[t._v("GameFramework"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("unity + "),e("a",{attrs:{href:"https://github.com/egametang/ET",target:"_blank",rel:"noopener noreferrer"}},[t._v("ET游戏框架"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("unreal + c++")]),t._v(" "),e("li",[t._v("unreal + "),e("a",{attrs:{href:"https://github.com/Tencent/UnLua",target:"_blank",rel:"noopener noreferrer"}},[t._v("unlua"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("unreal + "),e("a",{attrs:{href:"https://github.com/Tencent/sluaunreal",target:"_blank",rel:"noopener noreferrer"}},[t._v("sluaunreal"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("unreal + "),e("a",{attrs:{href:"https://github.com/Tencent/puerts",target:"_blank",rel:"noopener noreferrer"}},[t._v("puerts"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("cocos2d-x + lua")]),t._v(" "),e("li",[t._v("cocos2d-x + js")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/cloudwu/skynet",target:"_blank",rel:"noopener noreferrer"}},[t._v("skynet"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("微信小程序平台")]),t._v(" "),e("li",[t._v("其他家基于js的小程序平台")]),t._v(" "),e("li",[t._v("其他所有支持lua的引擎和平台")]),t._v(" "),e("li",[t._v("其他所有支持js的引擎和平台")])])])}),[],!1,null,null,null);e.default=a.exports}}]);