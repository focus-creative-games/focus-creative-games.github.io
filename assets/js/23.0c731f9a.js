(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{343:function(l,e,t){"use strict";t.r(e);var r=t(7),_=Object(r.a)({},(function(){var l=this,e=l._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[e("h1",{attrs:{id:"打包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打包"}},[l._v("#")]),l._v(" 打包")]),l._v(" "),e("p",[l._v("这儿的打包指的是build player，构建一个全新的游戏App。")]),l._v(" "),e("p",[l._v("打包工作流相关详细原理请自己参考"),e("RouterLink",{attrs:{to:"/hybridclr/build_pipeline/"}},[l._v("HybridCLR打包工作流")]),l._v("文档。")],1),l._v(" "),e("p",[l._v("打包前需要做一些防裁剪link.xml生成、桥接函数生成之类的工作，hybridclr_unity已经提供了傻瓜化的一键操作的命令"),e("code",[l._v("HybridCLR/generate/all")]),l._v("。\n你在打包前运行一下这个命令即可。注意，如果仅仅是编译热更新dll或者将热更新dll加入热更新资源管理系统，不需要执行 "),e("code",[l._v("HybridCLR/generate")]),l._v("\n下的命令。")]),l._v(" "),e("p",[l._v("具体打包流程如下：")]),l._v(" "),e("ul",[e("li",[l._v("运行 "),e("code",[l._v("HybridCLR/generate/all")])]),l._v(" "),e("li",[l._v("运行 "),e("code",[l._v("HybridCLR/CompileDll/xxx")]),l._v(" 编译出热更新dll，并且加入到你的资源打包系统")]),l._v(" "),e("li",[l._v("按照你们项目的打包方式打包即可")])])])}),[],!1,null,null,null);e.default=_.exports}}]);