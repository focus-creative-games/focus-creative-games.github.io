(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{473:function(t,e,r){"use strict";r.r(e);var a=r(7),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"aot-interpreter-bridge-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aot-interpreter-bridge-function"}},[t._v("#")]),t._v(" AOT-interpreter bridge function")]),t._v(" "),e("p",[t._v("Two-way function calls are required between the interpreter of the bridge function HybridCLR and AOT. For example, the interpreter calls the AOT function, or the AOT part has a callback function that calls the interpreter part.")]),t._v(" "),e("p",[t._v("The parameter passing and storage methods of the AOT part and the interpreter part are different. For example, the interpreter part calls the AOT function, and the parameters of the interpreter are all on the interpreter stack, and the function parameters of the interpreter must be passed to the AOT function by means of a suitable method. Similarly, the interpreter cannot directly obtain the parameters of the AOT callback function. Corresponding bridge functions must be generated for each type of signature function to realize the two-way function parameter transfer between the interpreter and the aot part.")]),t._v(" "),e("p",[t._v("Calling in the direction of "),e("code",[t._v("interpreter -> AOT")]),t._v(" can be done through libraries like ffi, but the cost of function calls is too high. The most reasonable way is to generate this bidirectional bridge function in advance.")]),t._v(" "),e("p",[t._v("The internal calls of the interpreter go directly to the interpreter stack, no bridge function is needed.")]),t._v(" "),e("p",[t._v("According to the principle of the bridge function, for the fixed AOT part, the bridge function set is determined, and no new additional bridge function will be needed no matter any subsequent hot updates. "),e("strong",[t._v("Therefore, there is no need to worry about the problem that the bridge function is missing suddenly after the hot update goes online.")])]),t._v(" "),e("h2",{attrs:{id:"bridge-function-signature"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bridge-function-signature"}},[t._v("#")]),t._v(" Bridge function signature")]),t._v(" "),e("p",[t._v("The bridge function must be generated in the AOT part in advance, which is similar to the principle of lua's wrapper function.")]),t._v(" "),e("p",[t._v("In order to find the corresponding bridge function for each function called between "),e("code",[t._v("AOT <-> interpreter")]),t._v(", there must be a way to calculate the function signature. In addition, functions with completely equivalent parameter types and return value types can share the same bridge function, which greatly reduces the number of bridge functions. For the following example, for x64 and arm64 platforms, long and class types share the same signature. So they can all share a bridge function with "),e("code",[t._v("long (long, long)")]),t._v(" signature.")]),t._v(" "),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fun1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")])]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fun2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")])]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")])]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fun3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("There are some differences in how the ABIs of different operating systems and architectures handle function parameter passing and return values. Considering that both Android v8 and iOS are arm64, in order to maximize the performance of these two common platforms and balance the cost of maintaining too many platforms, we simply designed the most stringent signature calculation rules for 32 and 64 bits respectively, called Universal32 and Universal64, as well as the Arm64 family bridge signature calculation rules are designed for the mobile game arm 64-bit platform.")]),t._v(" "),e("ul",[e("li",[t._v("Arm64")]),t._v(" "),e("li",[t._v("Universal32 uses the abi intersection of all 32-bit platforms to calculate the signature")]),t._v(" "),e("li",[t._v("Universal64 calculates the signature using the abi intersection method other than the arm64 platform")])]),t._v(" "),e("h3",{attrs:{id:"signature-rules-for-universal32"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#signature-rules-for-universal32"}},[t._v("#")]),t._v(" Signature rules for Universal32")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("type")]),t._v(" "),e("th",[t._v("signature")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("bool、byte")]),t._v(" "),e("td",[t._v("u1")])]),t._v(" "),e("tr",[e("td",[t._v("sbyte")]),t._v(" "),e("td",[t._v("i1")])]),t._v(" "),e("tr",[e("td",[t._v("short")]),t._v(" "),e("td",[t._v("i2")])]),t._v(" "),e("tr",[e("td",[t._v("ushort、char")]),t._v(" "),e("td",[t._v("u2")])]),t._v(" "),e("tr",[e("td",[t._v("int")]),t._v(" "),e("td",[t._v("i4")])]),t._v(" "),e("tr",[e("td",[t._v("uint")]),t._v(" "),e("td",[t._v("u4")])]),t._v(" "),e("tr",[e("td",[t._v("long")]),t._v(" "),e("td",[t._v("i8")])]),t._v(" "),e("tr",[e("td",[t._v("ulong")]),t._v(" "),e("td",[t._v("u8")])]),t._v(" "),e("tr",[e("td",[t._v("float")]),t._v(" "),e("td",[t._v("r4")])]),t._v(" "),e("tr",[e("td",[t._v("double")]),t._v(" "),e("td",[t._v("r8")])]),t._v(" "),e("tr",[e("td",[t._v("IntPtr")]),t._v(" "),e("td",[t._v("i4")])]),t._v(" "),e("tr",[e("td",[t._v("UintPtr")]),t._v(" "),e("td",[t._v("u4")])]),t._v(" "),e("tr",[e("td",[t._v("enum")]),t._v(" "),e("td",[t._v("The Universal32 signature corresponding to the underlying type")])]),t._v(" "),e("tr",[e("td",[t._v("Value type reference and class type")]),t._v(" "),e("td",[t._v("i4")])]),t._v(" "),e("tr",[e("td",[t._v("Value type")]),t._v(" "),e("td",[t._v("{S,C}{size}")])])])]),t._v(" "),e("p",[t._v("S and C correspond to the value types of aligment=1 and 8 respectively. For example, the signature of UnityEngine.Vector3 is S12.")]),t._v(" "),e("h3",{attrs:{id:"sharing-rules-for-universal64"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sharing-rules-for-universal64"}},[t._v("#")]),t._v(" Sharing Rules for Universal64")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("type")]),t._v(" "),e("th",[t._v("signature")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("bool、byte")]),t._v(" "),e("td",[t._v("u1")])]),t._v(" "),e("tr",[e("td",[t._v("sbyte")]),t._v(" "),e("td",[t._v("i1")])]),t._v(" "),e("tr",[e("td",[t._v("short")]),t._v(" "),e("td",[t._v("i2")])]),t._v(" "),e("tr",[e("td",[t._v("ushort、char")]),t._v(" "),e("td",[t._v("u2")])]),t._v(" "),e("tr",[e("td",[t._v("int")]),t._v(" "),e("td",[t._v("i4")])]),t._v(" "),e("tr",[e("td",[t._v("uint")]),t._v(" "),e("td",[t._v("u4")])]),t._v(" "),e("tr",[e("td",[t._v("long")]),t._v(" "),e("td",[t._v("i8")])]),t._v(" "),e("tr",[e("td",[t._v("ulong")]),t._v(" "),e("td",[t._v("u8")])]),t._v(" "),e("tr",[e("td",[t._v("float")]),t._v(" "),e("td",[t._v("r4")])]),t._v(" "),e("tr",[e("td",[t._v("double")]),t._v(" "),e("td",[t._v("r8")])]),t._v(" "),e("tr",[e("td",[t._v("IntPtr")]),t._v(" "),e("td",[t._v("i4")])]),t._v(" "),e("tr",[e("td",[t._v("UintPtr")]),t._v(" "),e("td",[t._v("u4")])]),t._v(" "),e("tr",[e("td",[t._v("enum")]),t._v(" "),e("td",[t._v("The Universal32 signature corresponding to the underlying type")])]),t._v(" "),e("tr",[e("td",[t._v("value type")]),t._v(" "),e("td",[t._v("S{size)}")])]),t._v(" "),e("tr",[e("td",[t._v("Vector2f")]),t._v(" "),e("td",[t._v("v2f")])]),t._v(" "),e("tr",[e("td",[t._v("Vector3f")]),t._v(" "),e("td",[t._v("v3f")])]),t._v(" "),e("tr",[e("td",[t._v("Vector4f")]),t._v(" "),e("td",[t._v("v4f")])]),t._v(" "),e("tr",[e("td",[t._v("Vector2d")]),t._v(" "),e("td",[t._v("v2d")])]),t._v(" "),e("tr",[e("td",[t._v("Vector3d")]),t._v(" "),e("td",[t._v("v3d")])]),t._v(" "),e("tr",[e("td",[t._v("Vector4d")]),t._v(" "),e("td",[t._v("v4d")])])])]),t._v(" "),e("p",[t._v("Compared with Univeral32, the value type does not distinguish alignment, all use S.")]),t._v(" "),e("h3",{attrs:{id:"sharing-rules-for-arm64"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sharing-rules-for-arm64"}},[t._v("#")]),t._v(" Sharing Rules for Arm64")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("type")]),t._v(" "),e("th",[t._v("signature")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("bool、byte")]),t._v(" "),e("td",[t._v("u1")])]),t._v(" "),e("tr",[e("td",[t._v("sbyte")]),t._v(" "),e("td",[t._v("i1")])]),t._v(" "),e("tr",[e("td",[t._v("short")]),t._v(" "),e("td",[t._v("i2")])]),t._v(" "),e("tr",[e("td",[t._v("ushort、char")]),t._v(" "),e("td",[t._v("u2")])]),t._v(" "),e("tr",[e("td",[t._v("int")]),t._v(" "),e("td",[t._v("i4")])]),t._v(" "),e("tr",[e("td",[t._v("uint")]),t._v(" "),e("td",[t._v("u4")])]),t._v(" "),e("tr",[e("td",[t._v("long")]),t._v(" "),e("td",[t._v("i8")])]),t._v(" "),e("tr",[e("td",[t._v("ulong")]),t._v(" "),e("td",[t._v("u8")])]),t._v(" "),e("tr",[e("td",[t._v("float")]),t._v(" "),e("td",[t._v("r4")])]),t._v(" "),e("tr",[e("td",[t._v("double")]),t._v(" "),e("td",[t._v("r8")])]),t._v(" "),e("tr",[e("td",[t._v("IntPtr")]),t._v(" "),e("td",[t._v("i4")])]),t._v(" "),e("tr",[e("td",[t._v("UintPtr")]),t._v(" "),e("td",[t._v("u4")])]),t._v(" "),e("tr",[e("td",[t._v("enum")]),t._v(" "),e("td",[t._v("The Universal32 signature corresponding to the underlying type")])]),t._v(" "),e("tr",[e("td",[t._v("Value type reference and class type")]),t._v(" "),e("td",[t._v("i8")])]),t._v(" "),e("tr",[e("td",[t._v("Value type as parameter(size<=16)")]),t._v(" "),e("td",[t._v("S16")])]),t._v(" "),e("tr",[e("td",[t._v("Value type as parameter(size>16)")]),t._v(" "),e("td",[t._v("sr")])]),t._v(" "),e("tr",[e("td",[t._v("Value type as return value")]),t._v(" "),e("td",[t._v("S{size)}")])]),t._v(" "),e("tr",[e("td",[t._v("Vector2f")]),t._v(" "),e("td",[t._v("v2f")])]),t._v(" "),e("tr",[e("td",[t._v("Vector3f")]),t._v(" "),e("td",[t._v("v3f")])]),t._v(" "),e("tr",[e("td",[t._v("Vector4f")]),t._v(" "),e("td",[t._v("v4f")])]),t._v(" "),e("tr",[e("td",[t._v("Vector2d")]),t._v(" "),e("td",[t._v("v2d")])]),t._v(" "),e("tr",[e("td",[t._v("Vector3d")]),t._v(" "),e("td",[t._v("v3d")])]),t._v(" "),e("tr",[e("td",[t._v("Vector4d")]),t._v(" "),e("td",[t._v("v4d")])])])]),t._v(" "),e("h2",{attrs:{id:"hybridclr-default-bridge-function-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hybridclr-default-bridge-function-set"}},[t._v("#")]),t._v(" HybridCLR default bridge function set")]),t._v(" "),e("p",[t._v("HybridCLR has scanned the Unity core library and common third-party libraries to generate a default bridge function set. The relevant code file is libil2cpp/hybridclr/interpreter/MethodBridge_{abi}.cpp, where {abi} is Arm64, Universal32 or Universal64.")]),t._v(" "),e("h2",{attrs:{id:"custom-bridge-function-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom-bridge-function-set"}},[t._v("#")]),t._v(" Custom bridge function set")]),t._v(" "),e("p",[t._v("In practical projects, there will always be some shared bridge functions of aot functions that are not in the default bridge function set. Therefore, tool scripts are provided in "),e("RouterLink",{attrs:{to:"/en/hybridclr/hybridclr_unity/"}},[t._v("hybridclr_unity package")]),t._v(", using the menu command "),e("code",[t._v("HybridCLR/Generate/MethodBridge")]),t._v(" to automatically generate all bridge functions according to the assembly.")],1)])}),[],!1,null,null,null);e.default=n.exports}}]);