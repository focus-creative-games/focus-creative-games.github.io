(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{449:function(t,e,a){"use strict";a.r(e);var o=a(7),n=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"source-data-conversion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#source-data-conversion"}},[t._v("#")]),t._v(" Source data conversion")]),t._v(" "),e("p",[t._v("Luban supports conversion of data in various formats, using command line parameters:")]),t._v(" "),e("ul",[e("li",[t._v("convert_json convert all source data to json source data format")]),t._v(" "),e("li",[t._v("convert_lua converts all source data to lua source data format, each record occupies a file")]),t._v(" "),e("li",[t._v("convert_xlsx converts all source data into xlsx format, each table occupies one file")])]),t._v(" "),e("p",[t._v("Note that luban can arbitrarily perform format conversion between supported data formats. This is a general function of Luban. It only needs to define and set parameters correctly. For more complete functions, see more example projects under the Projects directory in luban_example.")]),t._v(" "),e("p",[t._v("Take several projects in the Projects/ConvertDatas directory in luban_example as examples.")]),t._v(" "),e("h3",{attrs:{id:"convert-to-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#convert-to-json"}},[t._v("#")]),t._v(" convert to json")]),t._v(" "),e("p",[t._v("Your build command would roughly look like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" %GEN_CLIENT% -h %LUBAN_SERVER_IP% -j cfg --^\n -d %CONF_ROOT%\\Defines\\__root__.xml ^\n --input_data_dir %CONF_ROOT%\\Datas ^\n --output_data_dir convert_json ^\n --gen_types convert_json ^\n -s all\n")])])]),e("p",[t._v('That is, the --gen_types parameter takes "convert_json", converts the data in Datas to json format, and the output directory is convert_json.')]),t._v(" "),e("h3",{attrs:{id:"convert-to-lua"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#convert-to-lua"}},[t._v("#")]),t._v(" convert to lua")]),t._v(" "),e("p",[t._v("Your command line acts as:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" %GEN_CLIENT% -h %LUBAN_SERVER_IP% -j cfg --^\n -d %CONF_ROOT%\\Defines\\__root__.xml ^\n --input_data_dir %CONF_ROOT%\\Datas ^\n --output_data_dir convert_lua ^\n --gen_types convert_lua ^\n -s all\n")])])]),e("p",[t._v('That is, the --gen_types parameter takes "convert_lua", converts the specified data to lua format, and the output directory is convert_lua.')]),t._v(" "),e("h3",{attrs:{id:"convert-to-xlsx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#convert-to-xlsx"}},[t._v("#")]),t._v(" convert to xlsx")]),t._v(" "),e("p",[t._v("In the example, the json format is converted to xlsx, and the command line is:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" %GEN_CLIENT% -h %LUBAN_SERVER_IP% -j cfg --^\n -d %CONF_ROOT%\\Defines\\__root__.xml ^\n --input_data_dir %CONF_ROOT%\\Datas ^\n --input:convert:data_dir convert_json ^\n --output_data_dir conver_json_to_xlsx ^\n --gen_types convert_xlsx ^\n -s all\n")])])]),e("p",[t._v('The --gen_types parameter takes "convert_xlsx", the data source directory is convert_json, the specified data is converted to xlsx format, and the output directory is convert_json_to_xlsx.\nNote: The converted xlsx format may not meet the Luban configuration requirements. If you need to use Luban to export, you need to modify the format.')])])}),[],!1,null,null,null);e.default=n.exports}}]);